
DHT11_ITAS2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092c  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fa  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000305  00000000  00000000  00001336  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bc  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 75 00 	call	0xea	; 0xea <main>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <initDHT11>:


void initDHT11()
{
//Datenrichtung setzen
DHT11DDR =(1<<DHT11PWR);
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	81 b9       	out	0x01, r24	; 1
//Pin auf 5V schalten mit dem Port Register
DHT11PORT=(1<<DHT11PWR); 	
  98:	82 b9       	out	0x02, r24	; 2
  9a:	08 95       	ret

0000009c <setDataDir>:
}

void setDataDir(uint8_t tx)
{
if (tx) 
  9c:	88 23       	and	r24, r24
  9e:	21 f0       	breq	.+8      	; 0xa8 <setDataDir+0xc>
	//Datenrichtung für Data auf 1 setzen TX
	DHT11DDR |=(1<<DHT11DATA);				
  a0:	81 b1       	in	r24, 0x01	; 1
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	81 b9       	out	0x01, r24	; 1
  a6:	08 95       	ret
	//DHT11DDR |= (1<<DHT11DATA);	gleichwertig 
	else
	//Datenrichtung für Data auf 0 setzen RX
	DHT11DDR &=~(1<<DHT11DATA);
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	8f 7b       	andi	r24, 0xBF	; 191
  ac:	81 b9       	out	0x01, r24	; 1
  ae:	08 95       	ret

000000b0 <setDatapin>:
}


void setDatapin(uint8_t high)
{
	if (high)
  b0:	88 23       	and	r24, r24
  b2:	21 f0       	breq	.+8      	; 0xbc <setDatapin+0xc>
	//Datenrichtung für Data auf 1 setzen TX
	DHT11PORT |=(1<<DHT11DATA);
  b4:	82 b1       	in	r24, 0x02	; 2
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	82 b9       	out	0x02, r24	; 2
  ba:	08 95       	ret
	//DHT11DDR |= (1<<DHT11DATA);	gleichwertig
	else
	//Datenrichtung für Data auf 0 setzen RX
	DHT11PORT &=~(1<<DHT11DATA);
  bc:	82 b1       	in	r24, 0x02	; 2
  be:	8f 7b       	andi	r24, 0xBF	; 191
  c0:	82 b9       	out	0x02, r24	; 2
  c2:	08 95       	ret

000000c4 <startDHT11>:
}

void startDHT11()
{

setDataDir(DHT11TX);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 4e 00 	call	0x9c	; 0x9c <setDataDir>
setDatapin(DHT11LOW);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 58 00 	call	0xb0	; 0xb0 <setDatapin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	86 e6       	ldi	r24, 0x66	; 102
  d2:	92 ec       	ldi	r25, 0xC2	; 194
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <startDHT11+0x10>
  d8:	00 c0       	rjmp	.+0      	; 0xda <startDHT11+0x16>
  da:	00 00       	nop
_delay_us(18000);
setDatapin(DHT11HIGH);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 58 00 	call	0xb0	; 0xb0 <setDatapin>
setDataDir(DHT11RX);
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 4e 00 	call	0x9c	; 0x9c <setDataDir>
  e8:	08 95       	ret

000000ea <main>:
}


int main(void)
{
initDHT11();
  ea:	0e 94 4a 00 	call	0x94	; 0x94 <initDHT11>
    /* Replace with your application code */
    while (1) 
    {
	startDHT11();
  ee:	0e 94 62 00 	call	0xc4	; 0xc4 <startDHT11>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	27 e0       	ldi	r18, 0x07	; 7
  f4:	80 ee       	ldi	r24, 0xE0	; 224
  f6:	90 e1       	ldi	r25, 0x10	; 16
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0xe>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x18>
 102:	00 00       	nop
 104:	f4 cf       	rjmp	.-24     	; 0xee <main+0x4>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
